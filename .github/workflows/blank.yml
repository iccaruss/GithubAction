# GitHub에서 보여줄 workflow의 이름
name: CI

# 워크플로우가 실행될 조건을 지정하기 위해 on 사용
on:
  # 트리거 이벤트 참고 https://docs.github.com/en/actions/using-workflows/events-that-trigger-workflows
  # "master" 브랜치에서 pull request 이벤트가 발생하면 워크플로우가 트리거
  pull_request: # [push, fork] 형식으로 복수 사용 가능
    branches: [ "master" ]

# 워크플로우 실행 시 필요한 권한을 설정
permissions:
  contents: read
  issues: read
  checks: write
  pull-requests: write

# 하나 이상의 작업으로 구성된 워크플로우를 정의
jobs:
  # "build"라는 단일 작업을 포함하는 워크플로우
  build:
    # 작업이 실행될 runner의 유형을 설정
    runs-on: ubuntu-latest

    # 작업을 구성하는 단계를 나열
    steps:
      # 작업이 사용할 수 있도록 $GITHUB_WORKSPACE 아래에 저장소를 체크아웃
      - name: Checkout the code
        uses: actions/checkout@v3

      # Java 환경을 설정
      # Temurin 배포판을 사용하고 Java 버전을 17로 설정
      - name: Set up Java
        uses: actions/setup-java@v2
        with:
          distribution: "temurin"
          java-version: 17

      # gradlew 스크립트에 대한 실행 권한을 부여
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      # 단위 테스트를 실행
      - name: Run unit tests
        run: ./gradlew testDebugUnitTest --stacktrace

      #  단위 테스트 결과를 게시
      - name: Publish Test Results
        if: always()
        uses: EnricoMi/publish-unit-test-result-action@v2
        with:
          files: "**/test-results/**/*.xml"

      - name: Get commits using GitHub Script
        if: success()
        id: get_commits
        uses: actions/github-script@v5
        with:
          script: |
            const response = await github.request('GET /repos/{owner}/{repo}/pulls/{pull_number}/commits', {
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.payload.pull_request.number
            });
            const commits = response.data;
            const commitTitles = commits.map(commit => commit.commit.message.split('\n')[0]);
            const commitTitlesString = commitTitles.join('\n');
            console.log(commitTitlesString);
            return { commit_titles_string: commitTitlesString };

      - name: Send Slack Job Status
        if: success()
        uses: 8398a7/action-slack@v3
        with:
          status: success
          author_name: Pull Request Created
          custom_payload: |
            {
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "${{ steps.get_commits.outputs.commit_titles_string }}"
                  }
                },
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "mrkdwn",
                      "text": "*Repo:*\n iccaruss/GithubAction"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Message:*\n Merge ${{ steps.get_commits.outputs.commit }} into ${{ github.sha }}"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Commit:*\n ${{ github.sha }}"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Author:*\n ${{ github.actor }}"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Action:*\n ${{ github.event_name }}"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Job:*\n ${{ github.job }}"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Took:*\n ${{ steps.get_commits.outputs.duration }} sec"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Event Name:*\n ${{ github.event_name }}"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Ref:*\n ${{ github.ref }}"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Workflow:*\n ${{ github.workflow }}"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Pull Request:*\n ${{ github.event.pull_request.title }}"
                    }
                  ]
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

#      - name: Send Slack Job Status
#        if: success()
#        uses: 8398a7/action-slack@v3
#        with:
#          status: ${{ job.status }}
#          author_name: Pull Request Created
#          text: ${{ steps.get_commits.outputs.commit_titles_string }}
#          fields: repo,message,commit,author,action,eventName,ref,workflow,job,took,pullRequest
#        env:
#          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }} # required

#      # For GitHub Enterprise
#      if: success()
#      - uses: 8398a7/action-slack@v3
#        with:
#          github_base_url: https://your.ghe.com # Specify your GHE
#          status: ${{ job.status }}
#          fields: repo,message,commit,author,action,eventName,ref,workflow,job,took,pullRequest
#        env:
#          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
